{"version":3,"sources":["game.js","App.js","reportWebVitals.js","index.js"],"names":["generateNum","set","Set","new_goal","length","index","Math","floor","random","size","element","Array","from","push","delete","App","useState","input","setInput","goal","setGoal","result","setResult","guesses","setGuesses","alert","setAlert","resetGuess","checkGuess","num","uniq","String","prototype","concat","checkValid","a","b","guess","split","i","parseInt","includes","string","toString","addGuess","console","log","document","getElementById","disabled","checkOutcome","OutputTable","rows","className","id","type","value","onChange","ev","target","test","onKeyPress","key","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.efc17e95.chunk.js","sourcesContent":["export function generateNum() {\r\n  let set = new Set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n  let new_goal = [];\r\n  while (new_goal.length < 4) {\r\n    let index = Math.floor(Math.random() * set.size);\r\n    let element = Array.from(set)[index];\r\n    new_goal.push(element);\r\n    set.delete(element);\r\n  }\r\n\r\n  return new_goal;\r\n}\r\n\r\n","import './App.css';\nimport \"milligram\";\nimport { useState } from 'react';\nimport { generateNum } from './game';\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [goal, setGoal] = useState(generateNum());\n  const [result, setResult] = useState([]);\n  const [guesses, setGuesses] = useState([]);\n  const [alert, setAlert] = useState(\"\");\n\n  function updateInput(ev) {\n    let num = ev.target.value;\n\n    if (num.length < 5 && /^\\d*$/.test(num)) {\n      setInput(num);\n    }\n  }\n\n  console.log(goal);\n\n  function resetGuess() {\n    setInput(\"\");\n  }\n\n  function checkValid(num) {\n\n    let uniq = String.prototype.concat(...new Set(num));\n\n    if (num.length !== 4) {\n      setAlert(\"Number must be 4 characters\");\n      return false;\n    }\n    else if (uniq.length !== num.length) {\n      setAlert(\"Digits must all be unique\");\n      return false;\n    }\n\n    return true;\n  }\n\n  function checkGuess(num) {\n    if (checkValid(num)) {\n      let a = 0;\n      let b = 0\n      let guess = num.split(\"\");\n\n      for (let i = 0; i < guess.length; i++) {\n        if (parseInt(guess[i]) === goal[i]) {\n          a++;\n        } else if (goal.includes(parseInt(guess[i]))) {\n          b++;\n        }\n      }\n\n      let string = a.toString() + \"A\" + b.toString() + \"B\";\n\n      addGuess(num)\n      result.push(string);\n      console.log(result);\n      console.log(a);\n      checkOutcome(a);\n    }\n  }\n\n  function checkEnter(ev) {\n    if (ev.key === \"Enter\") {\n      checkGuess(input);\n      resetGuess();\n    }\n  }\n\n  function checkOutcome(a) {\n    if (guesses.length === 8) {\n      setAlert(\"You lose!\");\n      document.getElementById(\"input\").disabled = true;\n    }\n    if (a === 4) {\n      setAlert(\"You win!\");\n      document.getElementById(\"input\").disabled = true;\n    }\n  }\n\n  function addGuess(num) {\n    guesses.push(num);\n  }\n\n  function restartGame() {\n    setInput(\"\");\n    setGoal(generateNum());\n    setResult([]);\n    setGuesses([]);\n    document.getElementById(\"input\").disabled = false;\n  }\n\n  function OutputTable() {\n    let rows = [];\n\n    for (let i = 1; i < 9; i++) {\n      rows.push(\n        <tr>\n          <td>\n            {i}\n          </td>\n          <td>\n            {guesses[i - 1]}\n          </td>\n          <td>\n            {result[i - 1]}\n          </td>\n        </tr>\n      )\n    }\n\n    return rows;\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        4Digits\n      </header>\n      <div>Input:</div>\n      <input id=\"input\" type=\"text\" value={input} onChange={updateInput} onKeyPress={checkEnter}></input>\n      <button className=\"button\" onClick={() => { resetGuess(); checkGuess(input) }}>Guess</button>\n      <button onClick={restartGame}>Restart</button>\n      <table>\n        <tr>\n          <th>Try</th>\n          <th>Guess</th>\n          <th>Result</th>\n        </tr>\n        <OutputTable></OutputTable>\n      </table>\n      <div>{alert}</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}